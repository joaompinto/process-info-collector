# This is an openpipe pipeline, for more details check:
#   https://www.openpipe.org/

start:
  # Process every output file
  - read from file list: output/*.json
  - iterate:
  - read from file: $_$

  # Process each item from the file content
  - iterate:

  # Select only items with all required fields
  - select: $'status' in _ and 'exe' in _ and 'cmdline' in _$
  - merge:
      # Extract the process uid from the process status
      # first field after "Uid:"
      uid: $int([x.split('\t')[1] for x in status if 'Uid:' in x][0])$
  - drop: status  # no longer used

  # Select only processesses which are kubelet managed
  - select: $'kubepods.slice' in cgroup[0]$
  - drop: cgroup  # no longer user

  # Filter for openshift provided user ids
  # can be found with: grep uidAllocatorRange /etc/origin/master/master-config.yaml
  - select: $uid >= 1000000000$

  - update:
      set: { basecmd: "$cmdline[0]$", id: 0, exebin: "$exe.split('/')[-1]$" }

  - update using case replace:
      technology:
        # Select only master process (which don't have extra arguments)
        postgres: $exebin == 'postgres' and basecmd=='postgres'$
        mysql: $exebin == 'mysqld' $
        MongoDB: $exebin == 'mongod'$
        Apache: $ exe == '/usr/sbin/httpd' or cmdline[0] == '/usr/sbin/httpd' $
        HAProxy: $ exebin == 'haproxy' $
        Nginx: $ exebin == 'nginx' $
        Ruby: $ exebin == 'ruby' $
        Node: $ exebin == 'node' $
        Python: $ 'python' in exebin $
        Java: $ basecmd == 'java' or exebin == "java" $
        Other: True

  - update using case replace:
      tech_class:
        web server: $technology in ['Apache', 'Nginx', 'HAProxy']$
        database: $technology in ['postgres', 'mysql', 'MongoDB']$
        Other: True

  - send to segment: report_others

  - group by stats:
      keys: [technology, tech_class]
      stats: [id]
  - sort:
      key: tech_class
      descendent: True
  - transform using terminaltables:
      header: [Class, Tech, Count]
      keys: [tech_class, technology, id_count]
  - print:

report_others:
  - select: $technology == "Other"$
  - pprint: